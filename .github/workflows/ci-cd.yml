name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff --line-length 120 .
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: Run tests with pytest
      run: |
        pytest --cov=./ --cov-report=xml --cov-report=term-missing
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  deploy-staging:
    name: Deploy to Staging (Azure App Service)
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure App Service - Staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_SERVICE_NAME_STAGING }}
        package: .
        startup-command: 'uvicorn simple_web_interface_v2:app --host 0.0.0.0 --port 8001'
        
    - name: Configure App Settings - Staging
      run: |
        az webapp config appsettings set \
          --name ${{ secrets.AZURE_APP_SERVICE_NAME_STAGING }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --settings \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            OPENAI_BASE_URL="${{ secrets.OPENAI_BASE_URL }}" \
            WEBSITES_PORT=8001 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true
            
    - name: Notify deployment
      run: |
        echo "Staging deployment to Azure App Service completed successfully!"

  deploy-production:
    name: Deploy to Production (Azure App Service)
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure App Service - Production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_SERVICE_NAME_PRODUCTION }}
        package: .
        startup-command: 'uvicorn simple_web_interface_v2:app --host 0.0.0.0 --port 8001'
        
    - name: Configure App Settings - Production
      run: |
        az webapp config appsettings set \
          --name ${{ secrets.AZURE_APP_SERVICE_NAME_PRODUCTION }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --settings \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            OPENAI_BASE_URL="${{ secrets.OPENAI_BASE_URL }}" \
            WEBSITES_PORT=8001 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=true
            
    - name: Notify deployment
      run: |
        echo "Production deployment to Azure App Service completed successfully!"
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          Changes in this release:
          - Automated deployment to Azure App Service
          - All tests passed
          - Security scan completed
        draft: false
        prerelease: false
